{"version":3,"sources":["types/todoTypes.ts","reducer/todoReducer.ts","utils/generateId.ts","context/TodoContext.tsx","hooks/useTodoContext.tsx","components/TodoItemForm.tsx","components/TodoItemCard.tsx","components/Todo/ActiveTodo.tsx","components/Todo/DoneTodo.tsx","components/TodoItemsList.tsx","utils/todoUtils.ts","components/Content.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TodoActionTypes","todoReducer","state","action","produce","draft","type","LoadState","data","Add","todo","id","Date","now","toString","Math","floor","random","done","todos","push","Delete","filter","doneTodos","ToggleDone","index","findIndex","t","splice","unshift","Update","Error","TodoContext","createContext","defaultState","localStorageKey","TodoContextProvider","children","useReducer","dispatch","window","useEffect","savedState","localStorage","getItem","JSON","parse","setItem","stringify","Provider","value","useTodoContext","todoItemsContext","useContext","useInputStyles","makeStyles","root","marginBottom","TodoItemForm","classes","useForm","control","handleSubmit","reset","watch","onSubmit","formData","title","details","name","defaultValue","rules","required","render","field","TextField","label","fullWidth","className","multiline","Button","variant","color","disabled","useTodoItemCardStyles","doneRoot","textDecoration","TodoItemCard","item","handleDelete","useCallback","handleToggleDone","Card","classnames","CardHeader","IconButton","aria-label","onClick","FormControlLabel","Checkbox","checked","onChange","CardContent","Typography","component","ActiveTodo","draggableId","provided","snapshot","ref","innerRef","draggableProps","dragHandleProps","style","isDragging","draggableStyle","userSelect","padding","grid","margin","background","transition","opacity","spring","damping","stiffness","duration","DoneTodo","motion","li","layout","useTodoItemListStyles","listStyle","TodoItemsList","onDragEnd","result","destination","list","startIndex","endIndex","Array","from","removed","reorder","source","slice","sort","a","b","droppableId","droppableProps","isDraggingOver","borderRadius","map","placeholder","Content","Container","maxWidth","theme","createMuiTheme","palette","primary","main","secondary","App","ThemeProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.82d850be.chunk.js","sourcesContent":["export enum TodoActionTypes {\r\n    Add = 'todo/ADD',\r\n    LoadState = 'todo/LOAD_STATE',\r\n    Delete = 'todo/DELETE',\r\n    ToggleDone = 'todo/TOGGLE_DONE',\r\n    Update = 'todo/UPDATE',\r\n}\r\n\r\nexport type TodoContextProviderValue = ({\r\n    state:TodoState;\r\n    dispatch: (action: TodoAction) => void;\r\n} | null)\r\n\r\nexport interface TodoState {\r\n    todos: TodoItem[];\r\n    doneTodos: TodoItem[],\r\n}\r\n\r\nexport interface TodoFormData {\r\n    title: string\r\n    details: string\r\n}\r\n\r\nexport interface AddTodoAction {\r\n    type: TodoActionTypes.Add\r\n    data: {\r\n        todos: TodoFormData\r\n    }\r\n}\r\n\r\nexport interface DeleteTodoAction {\r\n    type: TodoActionTypes.Delete\r\n    data: {\r\n        id: number | string\r\n    }\r\n}\r\n\r\nexport interface ToggleDoneTodoAction {\r\n    type: TodoActionTypes.ToggleDone\r\n    data: {\r\n        id: number | string\r\n    }\r\n}\r\n\r\nexport interface UpdateTodoAction {\r\n    type: TodoActionTypes.Update\r\n    data: {\r\n        todos: TodoItem[];\r\n    }\r\n}\r\n\r\nexport interface LoadStateTodoAction {\r\n    type: TodoActionTypes.LoadState\r\n    data: TodoState\r\n}\r\n\r\nexport interface TodoItem {\r\n    id: string;\r\n    title: string;\r\n    details?: string;\r\n    done: boolean;\r\n}\r\n\r\nexport type TodoAction =\r\n    AddTodoAction\r\n    | DeleteTodoAction\r\n    | LoadStateTodoAction\r\n    | ToggleDoneTodoAction\r\n    | UpdateTodoAction\r\n\r\n","import {generateId} from '../utils/generateId'\r\nimport {TodoAction, TodoActionTypes, TodoState, TodoItem} from '../types/todoTypes'\r\nimport produce from 'immer'\r\n\r\nexport function todoReducer(state: TodoState, action: TodoAction): TodoState {\r\n    return produce(state, draft => {\r\n        if (action.type === TodoActionTypes.LoadState) {\r\n            return action.data\r\n        }\r\n        else if (action.type === TodoActionTypes.Add) {\r\n            const todo = {id: generateId(), done: false, ...action.data.todos}\r\n            draft.todos.push(todo)\r\n        }\r\n        else if (action.type === TodoActionTypes.Delete) {\r\n            draft.todos = draft.todos.filter(\r\n                ({id}) => id !== action.data.id,\r\n            )\r\n            draft.doneTodos = draft.doneTodos.filter(\r\n                ({id}) => id !== action.data.id,\r\n            )\r\n        }\r\n        else if(action.type === TodoActionTypes.ToggleDone) {\r\n\r\n                let index = state.todos.findIndex(t => t.id === action.data.id)\r\n                if(index !== -1) {\r\n                    const todo: TodoItem = draft.todos.splice(index, 1)[0]\r\n                    draft.doneTodos.unshift({...todo, done: true})\r\n\r\n                }else {\r\n                    let index = state.doneTodos.findIndex(t => t.id === action.data.id)\r\n                    const todo = draft.doneTodos.splice(index, 1)[0]\r\n                    draft.todos.push({...todo, done: false})\r\n                }\r\n        }\r\n       else if (action.type === TodoActionTypes.Update) {\r\n            draft.todos = action.data.todos\r\n       } else\r\n            throw new Error();\r\n    })\r\n    // switch (action.type) {\r\n    //     case TodoActionTypes.LoadState: {\r\n    //         return action.data\r\n    //     }\r\n    //     case TodoActionTypes.Add: {\r\n    //         const todo = {id: generateId(), done: false, ...action.data.todos}\r\n    //\r\n    //         return {\r\n    //             ...state,\r\n    //             todos: [\r\n    //                 ...state.todos,\r\n    //                 todo,\r\n    //             ]\r\n    //         }\r\n    //     }\r\n    //     case TodoActionTypes.Delete:\r\n    //         return {\r\n    //             ...state,\r\n    //             todos: state.todos.filter(\r\n    //                 ({ id }) => id !== action.data.id,\r\n    //             ),\r\n    //             doneTodos: state.doneTodos.filter(\r\n    //                 ({ id }) => id !== action.data.id,\r\n    //             )\r\n    //         };\r\n    //     case TodoActionTypes.ToggleDone:\r\n    //         let todos: TodoItem[]\r\n    //         let doneTodos: TodoItem[]\r\n    //         let todo: TodoItem\r\n    //\r\n    //         let index = state.todos.findIndex(t => t.id === action.data.id)\r\n    //         if(index !== -1) {\r\n    //             doneTodos = [{...state.todos[index], done:true}, ...state.doneTodos]\r\n    //             todos = [...state.todos.slice(0, index), ...state.todos.slice(index+1)]\r\n    //         }else {\r\n    //             let index = state.doneTodos.findIndex(t => t.id === action.data.id)\r\n    //             todos = [...state.todos, {...state.doneTodos[index], done: false}]\r\n    //             doneTodos = [...state.doneTodos.slice(0, index), ...state.doneTodos.slice(index+1)]\r\n    //         }\r\n    //\r\n    //\r\n    //         return {\r\n    //             ...state,\r\n    //             todos,\r\n    //             doneTodos\r\n    //         };\r\n    //     case TodoActionTypes.Update:\r\n    //         return {\r\n    //             ...state,\r\n    //             todos: action.data.todos\r\n    //         }\r\n    //     default:\r\n    //         throw new Error();\r\n    // }\r\n}","export function generateId() {\r\n    return `${Date.now().toString(36)}-${Math.floor(\r\n        Math.random() * 1e16,\r\n    ).toString(36)}`;\r\n}","import {createContext, ReactNode, useEffect, useReducer} from 'react'\r\nimport {TodoActionTypes, TodoContextProviderValue, TodoState} from '../types/todoTypes'\r\nimport {todoReducer} from '../reducer/todoReducer'\r\n\r\nexport const TodoContext = createContext<TodoContextProviderValue>(null);\r\n\r\nconst defaultState: TodoState = {\r\n    todos: [] ,\r\n    doneTodos: [],\r\n};\r\nconst localStorageKey = 'todos';\r\n\r\nexport const TodoContextProvider = ({\r\n                                             children,\r\n                                         }: {\r\n    children?: ReactNode;\r\n}) => {\r\n    const [state, dispatch] = useReducer(todoReducer, defaultState);\r\n\r\n    // @ts-ignore\r\n    window.state = state\r\n\r\n    useEffect(() => {\r\n        const savedState = localStorage.getItem(localStorageKey);\r\n\r\n        if (savedState) {\r\n            try {\r\n                dispatch({ type: TodoActionTypes.LoadState, data: JSON.parse(savedState) });\r\n            } catch {}\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        debugger\r\n        localStorage.setItem(localStorageKey, JSON.stringify(state));\r\n    }, [state]);\r\n\r\n    return (\r\n        <TodoContext.Provider value={{state, dispatch}}>\r\n            {children}\r\n        </TodoContext.Provider>\r\n    );\r\n};","import {useContext} from 'react'\r\nimport {TodoContext} from '../context/TodoContext'\r\n\r\nexport const useTodoContext = () => {\r\n    const todoItemsContext = useContext(TodoContext);\r\n\r\n    if (!todoItemsContext) {\r\n        throw new Error(\r\n            'useTodoItems hook should only be used inside TodoItemsContextProvider',\r\n        );\r\n    }\r\n\r\n    return todoItemsContext;\r\n};","import {Controller, useForm} from 'react-hook-form'\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button'\nimport {makeStyles} from '@material-ui/core/styles'\nimport {useTodoContext} from '../hooks/useTodoContext'\nimport {TodoActionTypes, TodoFormData} from '../types/todoTypes'\n\nconst useInputStyles = makeStyles(() => ({\n    root: {\n        marginBottom: 24,\n    },\n}));\n\nexport default function TodoItemForm() {\n    const classes = useInputStyles();\n    const { dispatch } = useTodoContext();\n    const { control, handleSubmit, reset, watch } = useForm();\n\n    return (\n        <form\n            onSubmit={handleSubmit((formData: TodoFormData) => {\n\n                dispatch({ type: TodoActionTypes.Add, data: { todos: formData } });\n                reset({ title: '', details: '' });\n            })}\n        >\n            <Controller\n                name=\"title\"\n                control={control}\n                defaultValue=\"\"\n                rules={{ required: true }}\n                render={({ field }) => (\n                    <TextField\n                        {...field}\n                        label=\"TODO\"\n                        fullWidth={true}\n                        className={classes.root}\n                    />\n                )}\n            />\n            <Controller\n                name=\"details\"\n                control={control}\n                defaultValue=\"\"\n                render={({ field }) => (\n                    <TextField\n                        {...field}\n                        label=\"Details\"\n                        fullWidth={true}\n                        multiline={true}\n                        className={classes.root}\n                    />\n                )}\n            />\n            <Button\n                variant=\"contained\"\n                color=\"primary\"\n                type=\"submit\"\n                disabled={!watch('title')}\n            >\n                Add\n            </Button>\n        </form>\n    );\n}\n","import {useCallback} from 'react'\r\nimport classnames from 'classnames'\r\n\r\nimport {TodoActionTypes, TodoItem} from '../types/todoTypes'\r\nimport {useTodoContext} from '../hooks/useTodoContext'\r\n\r\nimport Card from '@material-ui/core/Card'\r\nimport {makeStyles} from '@material-ui/core/styles'\r\nimport CardHeader from '@material-ui/core/CardHeader'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport Checkbox from '@material-ui/core/Checkbox'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\nconst useTodoItemCardStyles = makeStyles({\r\n    doneRoot: {\r\n        textDecoration: 'line-through',\r\n        color: '#888888',\r\n    },\r\n});\r\n\r\nconst TodoItemCard = function ({ item }: { item: TodoItem }) {\r\n    const classes = useTodoItemCardStyles();\r\n    const { dispatch } = useTodoContext();\r\n\r\n    const handleDelete = useCallback(\r\n        () => dispatch({ type: TodoActionTypes.Delete, data: { id: item.id } }),\r\n        [item.id, dispatch],\r\n    );\r\n\r\n    const handleToggleDone = useCallback(\r\n        () =>\r\n            dispatch({\r\n                type: TodoActionTypes.ToggleDone,\r\n                data: { id: item.id },\r\n            }),\r\n        [item.id, dispatch],\r\n    );\r\n\r\n    return (\r\n        <Card\r\n            className={classnames( {\r\n                [classes.doneRoot]: item.done,\r\n            })}\r\n        >\r\n            <CardHeader\r\n                action={\r\n                    <IconButton aria-label=\"delete\" onClick={handleDelete}>\r\n                        <DeleteIcon />\r\n                    </IconButton>\r\n                }\r\n                title={\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Checkbox\r\n                                checked={item.done}\r\n                                onChange={handleToggleDone}\r\n                                name={`checked-${item.id}`}\r\n                                color=\"primary\"\r\n                            />\r\n                        }\r\n                        label={item.title}\r\n                    />\r\n                }\r\n            />\r\n            {item.details ? (\r\n                <CardContent>\r\n                    <Typography variant=\"body2\" component=\"p\">\r\n                        {item.details}\r\n                    </Typography>\r\n                </CardContent>\r\n            ) : null}\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default  TodoItemCard","import React from 'react'\r\nimport {Draggable, DraggingStyle, NotDraggingStyle} from 'react-beautiful-dnd'\r\nimport TodoItemCard from '../TodoItemCard'\r\nimport {TodoItem} from '../../types/todoTypes'\r\n\r\ninterface Props {\r\n    item: TodoItem\r\n    index: number\r\n}\r\n\r\nconst grid = 24\r\nconst getItemStyle = (\r\n    isDragging: boolean,\r\n    draggableStyle: DraggingStyle | NotDraggingStyle | undefined\r\n): React.CSSProperties => ({\r\n    // some basic styles to make the items look a bit nicer\r\n    userSelect: \"none\",\r\n    padding: `${grid * 2} px 0`,\r\n    margin: `0 0 ${grid}px 0`,\r\n\r\n    // change background colour if dragging\r\n    background: '#fff',\r\n    transition: 'opacity 100ms linear',\r\n\r\n    // styles we need to apply on draggables\r\n    ...draggableStyle,\r\n    opacity: isDragging? 0.5 : 1,\r\n\r\n});\r\n\r\nconst ActiveTodo:React.FC<Props> = ({item, index}) => {\r\n    return (\r\n        <Draggable key={item.id} draggableId={item.id} index={index}>\r\n            {(provided, snapshot): JSX.Element => (\r\n                <div\r\n                    ref={provided.innerRef}\r\n                    {...provided.draggableProps}\r\n                    {...provided.dragHandleProps}\r\n                    style={getItemStyle(\r\n                        snapshot.isDragging,\r\n                        provided.draggableProps.style\r\n                    )}\r\n                >\r\n                    <TodoItemCard item={item} />\r\n                </div>\r\n\r\n            )}\r\n        </Draggable>\r\n    )\r\n}\r\n\r\nexport default ActiveTodo","import React from 'react'\r\nimport TodoItemCard from '../TodoItemCard'\r\nimport {motion} from 'framer-motion'\r\nimport {TodoItem} from '../../types/todoTypes'\r\n\r\nconst spring = {\r\n    type: 'spring',\r\n    damping: 25,\r\n    stiffness: 120,\r\n    duration: 0.25,\r\n};\r\n\r\ninterface Props {\r\n    item: TodoItem\r\n}\r\n\r\nconst DoneTodo:React.FC<Props> = ({item}) => {\r\n    return (\r\n        <motion.li key={item.id} transition={spring} layout={true}\r\n                   style={{margin: \"24px 0\"}}\r\n        >\r\n            <TodoItemCard item={item} />\r\n        </motion.li >\r\n    )\r\n}\r\n\r\nexport default DoneTodo","import React from 'react'\nimport {DragDropContext, Droppable, DropResult} from 'react-beautiful-dnd'\n\nimport ActiveTodo from './Todo/ActiveTodo'\n\nimport {useTodoContext} from '../hooks/useTodoContext'\nimport {TodoActionTypes} from '../types/todoTypes'\nimport {reorder, sortItems} from '../utils/todoUtils'\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport DoneTodo from './Todo/DoneTodo'\n\n\nconst useTodoItemListStyles = makeStyles({\n    root: {\n        listStyle: 'none',\n        padding: 0,\n    },\n});\n\n\nexport const TodoItemsList = function () {\n    let {state: {todos, doneTodos}, dispatch} = useTodoContext();\n\n    const classes = useTodoItemListStyles();\n\n    const onDragEnd = (result: DropResult): void => {\n        if (!result.destination) {\n            return;\n        }\n        todos = reorder(todos, result.source.index, result.destination.index)\n        todos = sortItems(todos)\n        dispatch({\n            type: TodoActionTypes.Update,\n            data: {todos}\n        })\n    }\n\n    const getListStyle = (isDraggingOver: boolean): React.CSSProperties => ({\n        background: isDraggingOver ? 'rgba(174, 183, 194, 0.07)' : 'transparent',\n        transition: 'background-color 200ms linear',\n        padding: '20px 0',\n        borderRadius: '4px'\n    });\n\n\n    return (\n        <DragDropContext onDragEnd={onDragEnd}>\n            <Droppable droppableId='todo' >\n                {(provided, snapshot): JSX.Element => (\n                    <ul\n                        className={classes.root}\n                        {...provided.droppableProps} ref={provided.innerRef}\n                        style={getListStyle(snapshot.isDraggingOver)}\n                    >\n                        {todos.map((item, index) => <ActiveTodo key={item.id} item={item} index={index} />)}\n                        {provided.placeholder}\n                        {doneTodos.map((item) => <DoneTodo key={item.id} item={item}/>)}\n                    </ul>\n                )}\n            </Droppable>\n        </DragDropContext>\n\n    );\n};\n\n\n","import {TodoItem} from '../types/todoTypes'\r\n\r\n// a little function to help us with reordering the result\r\nexport function reorder(list: TodoItem[], startIndex: number, endIndex: number): TodoItem[] {\r\n    const result = Array.from(list);\r\n    const [removed] = result.splice(startIndex, 1);\r\n    result.splice(endIndex, 0, removed);\r\n\r\n    return result;\r\n};\r\n\r\nexport function sortItems(items: TodoItem[]): TodoItem[]  {\r\n    return items.slice().sort((a, b) => {\r\n        if (a.done && !b.done) {\r\n            return 1;\r\n        }\r\n\r\n        if (!a.done && b.done) {\r\n            return -1;\r\n        }\r\n\r\n        return 0;\r\n    });\r\n}\r\n","import Container from '@material-ui/core/Container'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport TodoItemForm from './TodoItemForm'\r\nimport {TodoItemsList} from './TodoItemsList'\r\nimport React from 'react'\r\n\r\nfunction Content() {\r\n    return (\r\n        <Container maxWidth=\"sm\">\r\n            <header>\r\n                <Typography variant=\"h2\" component=\"h1\">\r\n                    Todo List\r\n                </Typography>\r\n            </header>\r\n            <main>\r\n                <TodoItemForm />\r\n                <TodoItemsList />\r\n            </main>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Content","import React from 'react';\n\nimport {TodoContextProvider} from './context/TodoContext'\nimport Content from './components/Content'\n\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: '#9012fe',\n        },\n        secondary: {\n            main: '#b2aabf',\n        },\n    },\n});\n\nfunction App() {\n    return (\n        <TodoContextProvider>\n            <ThemeProvider theme={theme}>\n                <Content />\n            </ThemeProvider>\n        </TodoContextProvider>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            },\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}